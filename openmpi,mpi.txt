Perfect üëç ‚Äî let‚Äôs go through **OpenMPI** and **MPI (Message Passing Interface)** ‚Äî what they are, how they work, and then how to **install and run MPI programs** step-by-step on **Ubuntu** for **single-node** and **multi-node** setups.

---

# üß† 1. WHAT IS MPI?

**MPI (Message Passing Interface)** is a **standard** for **parallel programming** ‚Äî used to run the same program across multiple processes that communicate via **messages**.

It allows computers (or cores) to:

* Share data,
* Coordinate tasks,
* Run large computations in parallel.

---

# ‚öôÔ∏è 2. WHAT IS OPENMPI?

**OpenMPI** is a **popular open-source implementation** of the MPI standard.
It‚Äôs a library that lets you run your C, C++, or Fortran programs using MPI functions.

There are other implementations like:

* MPICH
* Intel MPI

But **OpenMPI** is the most widely used in labs and clusters.

---

# üíª 3. INSTALL OPENMPI ON UBUNTU (Single Node)

Follow these steps carefully üëá

---

## üîπ Step 1: Update and Install

```bash
sudo apt update
sudo apt install openmpi-bin openmpi-common libopenmpi-dev -y
```

‚úÖ Check installation:

```bash
mpicc --version
```

Output example:

```
mpicc (Open MPI) 4.1.5
```

---

## üîπ Step 2: Create a Sample MPI Program

Create file:

```bash
nano hello_mpi.c
```

Paste:

```c
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    MPI_Init(NULL, NULL);  // Initialize MPI
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    int name_len;
    MPI_Get_processor_name(processor_name, &name_len);

    printf("Hello from processor %s, rank %d out of %d processors\n",
           processor_name, world_rank, world_size);

    MPI_Finalize();  // Finalize MPI
}
```

---

## üîπ Step 3: Compile the Program

```bash
mpicc hello_mpi.c -o hello_mpi
```

---

## üîπ Step 4: Run the Program

Run with **4 processes**:

```bash
mpirun -np 4 ./hello_mpi
```

‚úÖ Output:

```
Hello from processor ubuntu, rank 0 out of 4 processors
Hello from processor ubuntu, rank 1 out of 4 processors
Hello from processor ubuntu, rank 2 out of 4 processors
Hello from processor ubuntu, rank 3 out of 4 processors
```

---

# üåê 4. MULTI-NODE OPENMPI CLUSTER (Multiple Machines)

Now let‚Äôs run the **same MPI program** on multiple computers (nodes).

---

## üñ•Ô∏è Cluster Setup Example

| Node   | Role            | IP Address    |
| ------ | --------------- | ------------- |
| master | Controller node | 192.168.1.100 |
| node1  | Worker 1        | 192.168.1.101 |
| node2  | Worker 2        | 192.168.1.102 |

---

## üîπ Step 1: Install OpenMPI on All Nodes

Run on **each machine**:

```bash
sudo apt update
sudo apt install openmpi-bin openmpi-common libopenmpi-dev -y
```

---

## üîπ Step 2: Enable SSH Access Between Nodes

On the **master node**:

```bash
ssh-keygen -t rsa -P ""
ssh-copy-id user@node1
ssh-copy-id user@node2
```

‚úÖ Test:

```bash
ssh node1
ssh node2
```

You should log in **without a password**.

---

## üîπ Step 3: Share Your Program

From master:

```bash
scp hello_mpi user@node1:/home/user/
scp hello_mpi user@node2:/home/user/
```

---

## üîπ Step 4: Create a Host File

On master:

```bash
nano hosts.txt
```

Add:

```
master slots=2
node1 slots=2
node2 slots=2
```

---

## üîπ Step 5: Run MPI Program Across Nodes

On master:

```bash
mpirun -np 6 --hostfile hosts.txt ./hello_mpi
```

‚úÖ Example Output:

```
Hello from processor master, rank 0 out of 6 processors
Hello from processor node1, rank 1 out of 6 processors
Hello from processor node2, rank 2 out of 6 processors
Hello from processor node1, rank 3 out of 6 processors
Hello from processor master, rank 4 out of 6 processors
Hello from processor node2, rank 5 out of 6 processors
```

---

# üß© 5. COMMON MPI COMMANDS

| Command                              | Description                      |
| ------------------------------------ | -------------------------------- |
| `mpicc file.c -o file`               | Compile MPI program              |
| `mpirun -np N ./file`                | Run with N processes             |
| `mpirun --hostfile hosts.txt ./file` | Run across nodes                 |
| `mpiexec`                            | Same as `mpirun`                 |
| `ompi_info`                          | Check OpenMPI config and version |

---

# ‚ö° 6. BONUS: TEST PARALLEL SUM PROGRAM

Here‚Äôs a simple parallel addition example:

```c
#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size, n = 10;
    int arr[10] = {1,2,3,4,5,6,7,8,9,10};

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int local_sum = 0;
    for (int i = rank; i < n; i += size)
        local_sum += arr[i];

    int total_sum = 0;
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0)
        printf("Total Sum = %d\n", total_sum);

    MPI_Finalize();
}
```

Compile & run:

```bash
mpicc sum.c -o sum
mpirun -np 4 ./sum
```

‚úÖ Output:

```
Total Sum = 55
```

---

# ‚úÖ MPI SUMMARY

| Feature           | Description                   |
| ----------------- | ----------------------------- |
| Library           | OpenMPI                       |
| Programming Model | Distributed (message passing) |
| Languages         | C, C++, Fortran               |
| Run Mode          | Single or Multi-node          |
| Key Commands      | `mpicc`, `mpirun`, `mpiexec`  |

---

Would you like me to give you a **shell script (`install_openmpi.sh`)** that automatically installs OpenMPI and runs a sample program on Ubuntu?
It‚Äôll save time for lab setup and testing.
